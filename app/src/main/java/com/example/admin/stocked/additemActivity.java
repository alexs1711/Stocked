package com.example.admin.stocked;import android.app.ProgressDialog;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.android.material.snackbar.Snackbar;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.OnProgressListener;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.UUID;import de.hdodenhof.circleimageview.CircleImageView;public class additemActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener,View.OnClickListener {    private EditText itemname, itemcategory, itemUnitEdit,itemDescriptionEdit;    private TextView itembarcode;    private FirebaseAuth firebaseAuth;    public static TextView resulttextview;    Button scanbutton, additemtodatabase;    String userUID ;    private CircleImageView itemPic;    public Uri imageUri;    public boolean imageUpload = true;    private FirebaseStorage storage;    private StorageReference storageReference;    DatabaseReference databaseReference;    DatabaseReference databaseReferencecat;    DatabaseReference mDatabase;    String itemcategoryValue, imagelocation;    Category cat;    Spinner spin;    public static additemActivity ItemListapp;    public static final int REQUEST = 1;    public static final int FAILED = 2;    FirebaseUser users;    List<Category> categories;    //add item strings    String itemnameValue, itemUnits, itembarcodeValue, CatCode,itemdesc;    Button dashboard, products, addprod, settings;    HashMap<String ,String> CatNameKey = new HashMap<String,String>();    @Override // arreglar que cuando borre la categoria compruebe que ya no existe y no deje insertar ya que el spinner lo carga y claro te deja meterlo pero eso ya no existe    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_additem);        firebaseAuth = FirebaseAuth.getInstance();        users = firebaseAuth.getCurrentUser();        databaseReference = FirebaseDatabase.getInstance().getReference("Users");        databaseReferencecat = FirebaseDatabase.getInstance().getReference("Users");        resulttextview = findViewById(R.id.UpdateItemBarCode);        additemtodatabase = findViewById(R.id.UpdateItem);        scanbutton = findViewById(R.id.buttonscan);        itemname = findViewById(R.id.UpdateItemName);        //itemcategory= findViewById(R.id.editcategory);        itemUnitEdit = findViewById(R.id.UpdateItemUnits);        itembarcode = findViewById(R.id.UpdateItemBarCode);        itemDescriptionEdit = findViewById(R.id.UpdateItemDescription);        userUID = users.getUid();        mDatabase = FirebaseDatabase.getInstance().getReference("Users").child(userUID).child("CategoryDetails");        //static reference to this app so it can be referred from external methods        ItemListapp = this;        //Getting the instance of Spinner and applying OnItemSelectedListener on it        spin = (Spinner) findViewById(R.id.spinner);        spin.setOnItemSelectedListener(this);        //storage references to database instances        storage = FirebaseStorage.getInstance();        storageReference = storage.getReference();        // itempic selector image upload to firebase database        itemPic = findViewById(R.id.image_upload_pic);        itemPic.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                choosePicture();            }        });        // String result = finaluser.substring(0, finaluser.indexOf("@"));        scanbutton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(getApplicationContext(), ScanCodeActivity.class));            }        });        additemtodatabase.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                additem();            }        });        loadCategories();        //Buttons of the dashboard        dashboard = findViewById(R.id.dashboard);        dashboard.setOnClickListener((View.OnClickListener) this);        products = findViewById(R.id.products);        products.setOnClickListener((View.OnClickListener) this);        addprod = findViewById(R.id.addtoDB);        addprod.setOnClickListener((View.OnClickListener) this);        settings = findViewById(R.id.settings);        settings.setOnClickListener((View.OnClickListener) this);    }    @Override    public void onClick(View view) {        Intent i;        switch (view.getId()) {            case R.id.dashboard:                finish();                break;            case R.id.products:                i = new Intent(this, CategoriesActivity.class);                startActivity(i);                finish();                break;            case R.id.addtoDB:                i = new Intent(this, AddselectorActivity.class);                startActivity(i);                finish();                break;            case R.id.settings:                i = new Intent(this, ConfigurationActivity.class);                startActivity(i);                finish();                break;            default:                break;        }    }    @Override    public void onBackPressed() {        super.onBackPressed();        finish();    }    private void choosePicture() {        Intent intent = new Intent();        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(intent, REQUEST);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == REQUEST) {            if (resultCode == RESULT_OK && data != null && data.getData() != null) {                imageUri = data.getData();                itemPic.setImageURI(imageUri);            } else if (resultCode == FAILED) {                Toast.makeText(this, getString(R.string.UploadError), Toast.LENGTH_SHORT).show();            }        }    }    private void uploadPicture(final String randomItemCode) {        //we check for imageUri, in case the user did not select any pic there will be an error so we wont upload nor set any pic in the firebase json        if (imageUri == null) {            imageUpload = false;        } else {            final ProgressDialog pd = new ProgressDialog(this);            pd.setTitle(getString(R.string.progress));            pd.show();            final String randomKey = UUID.randomUUID().toString();            final StorageReference riversRef = storageReference.child("ItemImages/" + randomItemCode + ".jpg");            // Register observers to listen for when the download is done or if it fails            riversRef.putFile(imageUri)                    .addOnFailureListener(new OnFailureListener() {                        @Override                        public void onFailure(@NonNull Exception exception) {                            pd.dismiss();                            Toast.makeText(getApplicationContext(), getString(R.string.UploadError), Toast.LENGTH_LONG).show();                        }                    }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                @Override                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                    pd.dismiss();                    Snackbar.make(findViewById(android.R.id.content), getString(R.string.UploadedPic), Snackbar.LENGTH_LONG).show();                    //String dw = taskSnapshot.getMetadata().getReference().getDownloadUrl().toString()+"xd";                }            }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {                @Override                public void onProgress(@NonNull UploadTask.TaskSnapshot snapshot) {                    double progressPercent = (100.00 * snapshot.getBytesTransferred() / snapshot.getTotalByteCount());                    pd.setMessage(getString(R.string.progress) + (int) progressPercent + "%");                }            })/* https://stackoverflow.com/questions/50585334/tasksnapshot-getdownloadurl-method-not-working/55503926#55503926*/                    .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                        @Override                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                            if (taskSnapshot.getMetadata() != null) {                                if (taskSnapshot.getMetadata().getReference() != null) {                                    Task<Uri> result = taskSnapshot.getStorage().getDownloadUrl();                                    result.addOnSuccessListener(new OnSuccessListener<Uri>() {                                        @Override                                        public void onSuccess(Uri uri) {                                            String imageUrl = uri.toString();                                            imagelocation = imageUrl;                                            Items items = new Items(randomItemCode,itemnameValue, itembarcodeValue, imagelocation,itemdesc,itemUnits,CatCode);                                            //databaseReference.child(resultemail).child("Items").child(itembarcodeValue).setValue(items);  useless child since it's everything in the items by category                                            //databaseReferencecat.child(resultemail).child("ItemByCategory").child(CatCode).child(randomItemCode).setValue(items);                                            databaseReferencecat.child(userUID).child("Items").child(randomItemCode).setValue(items);                                        }                                    });                                }                            }                        }                    });        }    }    public void loadCategories() {        categories = new ArrayList<>();//creo una lista. una arraylist con la clase category        mDatabase.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if (dataSnapshot.exists()) {                    for (DataSnapshot ds : dataSnapshot.getChildren()) {                        //String cate = ds.getKey(); code update no longer using the getKey(name of the node) since now it´s a random UUID so I´m gonna be using the name of the category attribute obtaining the ds value converted to Category.class                        //crear una arraylist o algo parecido con el que comparar la posicion clickeada con el string del spinner en el itemselected                        cat= ds.getValue(Category.class);                        String name = cat.getName();                        //String UUID = cat.getUUID();                        //Toast.makeText(getApplicationContext(),cat.getUuid(), Toast.LENGTH_LONG).show();                        CatNameKey.put(cat.getName(),cat.getUuid());                        System.out.println();                        categories.add(new Category(cat.getName()));//para agregar a la List tengo que especificar que quiero meter un arraylist el cual es una categoria                    }                    ArrayAdapter<Category> aa = new ArrayAdapter<>(additemActivity.this, android.R.layout.simple_spinner_item, categories);//tal vez crear layout para el spinner?                    aa.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                    //Setting the ArrayAdapter data on the Spinner                    spin.setAdapter(aa);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    // addding item to databse    public void additem() {        final String randomItemCode = UUID.randomUUID().toString();        /*maybe optimize the way i get the not filled things with more error request focus*/        itemnameValue = itemname.getText().toString();        itemUnits = itemUnitEdit.getText().toString();        itembarcodeValue = itembarcode.getText().toString();        itemdesc = itemDescriptionEdit.getText().toString();        if (TextUtils.isEmpty(itemcategoryValue)) {            Toast.makeText(additemActivity.this, getString(R.string.addCatFirstError), Toast.LENGTH_SHORT).show();        }        if (itembarcodeValue.isEmpty()) {            itembarcode.setError(getString(R.string.empty_field));            itembarcode.requestFocus();            return;        }        if (!TextUtils.isEmpty(itemnameValue) && !TextUtils.isEmpty(itemcategoryValue) && !TextUtils.isEmpty(itemUnits)) {            uploadPicture(randomItemCode);//this goes first in case the image is not uploaded so we will check it with success listener and changing the boolean to true            if (!imageUpload) {//in case boolean                //Toast.makeText(additemActivity.this, "You have not picked any photo for the item, so default photo will be set.", Toast.LENGTH_SHORT).show();                imagelocation = "no photo";//uuid, itemname, itembarcode, imagelocation, description, itemunits                Items items = new Items(randomItemCode,itemnameValue, itembarcodeValue, imagelocation,itemdesc,itemUnits,CatCode);//removal of itemCategoryValue since it has no sense                //databaseReference.child(resultemail).child("Items").child(itembarcodeValue).setValue(items); useless child since it's everything in the items by category                //databaseReferencecat.child(resultemail).child("ItemByCategory").child(CatCode).child(randomItemCode).setValue(items);                databaseReferencecat.child(userUID).child("Items").child(randomItemCode).setValue(items);            }            itemname.setText("");            itembarcode.setText("");            itemUnitEdit.setText("");            itembarcode.setText("");            itemDescriptionEdit.setText("");            itemPic.setImageDrawable(getResources().getDrawable(R.drawable.cameraicon));            Snackbar.make(findViewById(android.R.id.content), getString(R.string.itemAdded), Snackbar.LENGTH_SHORT).show();        } else {            Toast.makeText(additemActivity.this, getString(R.string.fillall), Toast.LENGTH_SHORT).show();        }    }    //Performing action onItemSelected and onNothing selected    @Override    public void onItemSelected(AdapterView<?> arg0, View arg1, int position, long id) {        itemcategoryValue = arg0.getItemAtPosition(position).toString();        CatCode = CatNameKey.get(itemcategoryValue);        //Toast.makeText(getApplicationContext(),CatCode , Toast.LENGTH_LONG).show();    }    @Override    public void onNothingSelected(AdapterView<?> arg0) {        // TODO Auto-generated method stub    }}